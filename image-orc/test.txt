https://towardsdatascience.com/a-table-detection-cell-recognition-and-text-extraction-algorithm-to-convert-tables-to-excel-files-902edcf289ec
https://layout-parser.readthedocs.io/_/downloads/en/latest/pdf/
https://layout-parser.readthedocs.io/en/latest/api_doc/ocr.html


import qrcode from PIL import Image, ImageDraw, ImageFont # Generate QR code qr_text = "1244dq" qr = qrcode.QRCode(version=1, box_size=40, border=2) qr.add_data(qr_text) qr.make(fit=True) # Create the QR code image qr_img = qr.make_image(fill='black', back_color='white') # Try to load a specific font, fallback to default if not available try: font_path = r"C:\Users\rafey\Downloads\dejavu-fonts-ttf-2.37\dejavu-fonts-ttf-2.37\ttf\DejaVuSans.ttf" font_size = 40 font = ImageFont.truetype(font_path, font_size) except IOError: font = ImageFont.load_default() font_size = 10 # default font size # Prepare to draw the text qr_width, qr_height = qr_img.size print(qr_width,qr_height) text_img = Image.new('RGB', (qr_width, qr_height + font_size+10), 'white') text_draw = ImageDraw.Draw(text_img) # Draw the QR code onto the text image text_img.paste(qr_img, (0, 0)) # Determine the size of the text and adjust if necessary text_bbox = text_draw.textbbox((0, 0), qr_text, font=font) print(text_bbox) text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1] print(text_width,text_height) if text_width > qr_width: font_size = int(font_size * qr_width / text_width) try: font = ImageFont.truetype(font_path, font_size) except IOError: font = ImageFont.load_default() text_bbox = text_draw.textbbox((0, 0), qr_text, font=font) text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1] # Draw the text below the QR code text_position = ((qr_width - text_width) // 2, qr_height-5) text_draw.text(text_position, qr_text, fill='black', font=font) # Save the final image text_img.save(r"C:\Users\rafey\OneDrive - Veracitiz Solutions Pvt Ltd\Desktop\qr_code_with_text.png") # Show the final image text_img.show()
